@using CarRental.Comparer.Web.Services
@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject ThemeService ThemeService

<MudThemeProvider Theme="@ThemeService.CustomTheme" IsDarkMode="_isDarkMode" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<MudLayout>
    <MudAppBar Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudText Typo="Typo.h5" Class="ml-3">Car Rental</MudText>
        <MudSpacer />
        <MudIconButton Icon="@(DarkLightModeButtonIcon)" Color="Color.Inherit" OnClick="@DarkModeToggle" />

        <AuthorizeView>
            <Authorized>
                <MudText Typo="Typo.body1" Class="mr-2">
                    @{
                        var userName = context.User.Identity?.Name;
                        var userEmail = context.User.Claims.FirstOrDefault(c => c.Type == "email")?.Value;
                    }
                    @if(string.IsNullOrEmpty(userName) == false && string.IsNullOrEmpty(userEmail) == false)
                    {
                        <text>Hello, @userName (@userEmail)</text>
                    }
                </MudText>
                <MudButton StartIcon="@Icons.Material.Filled.Logout" Color="Color.Secondary" OnClick="SignOut">Log out</MudButton>
            </Authorized>
            <NotAuthorized>
                <MudButton StartIcon="@Icons.Material.Filled.Login" Color="Color.Secondary" OnClick="LogIn">Log in</MudButton>
            </NotAuthorized>
        </AuthorizeView>

    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
        <NavMenu />
    </MudDrawer>
    <MudMainContent Class="mt-16 pa-4">
        @Body
    </MudMainContent>
</MudLayout>


<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    private bool _drawerOpen = true;
    private bool _isDarkMode = true;

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    private void LogIn()
    {
        NavigationManager.NavigateTo("loginpage");
    }
    private void SignOut()
    {
        NavigationManager.NavigateToLogout("authentication/logout");
    }

    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private void DarkModeToggle()
    {
        _isDarkMode = !_isDarkMode;
    }

    public string DarkLightModeButtonIcon => _isDarkMode switch
    {
        true => Icons.Material.Rounded.AutoMode,
        false => Icons.Material.Outlined.DarkMode,
    };
}


