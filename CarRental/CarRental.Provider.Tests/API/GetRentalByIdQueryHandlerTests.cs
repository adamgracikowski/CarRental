using Ardalis.Result;
using Ardalis.Specification;
using AutoMapper;
using CarRental.Common.Core.ProviderEntities;
using CarRental.Provider.API.DTOs.Rentals;
using CarRental.Provider.API.Requests.Rentals.Handlers;
using CarRental.Provider.API.Requests.Rentals.Queries;
using CarRental.Provider.Persistence.Specifications.Rentals;
using CarRental.Provider.Tests.Dummies;
using FluentAssertions;
using Moq;

namespace CarRental.Provider.Tests.API;

public sealed class GetRentalByIdQueryHandlerTests
{
	private readonly Mock<IRepositoryBase<Rental>> rentalsRepositoryMock;
	private readonly Mock<IMapper> mapperMock;
	private readonly GetRentalByIdQueryHandler handler;

	public GetRentalByIdQueryHandlerTests()
	{
		rentalsRepositoryMock = new Mock<IRepositoryBase<Rental>>();
		mapperMock = new Mock<IMapper>();
		handler = new GetRentalByIdQueryHandler(rentalsRepositoryMock.Object, mapperMock.Object);
	}

	[Fact]
	public async Task Handle_WhenRentalDoesNotExist_ShouldReturnNotFound()
	{
		// Arrange
		var query = new GetRentalByIdQuery(Id: default, Audience: string.Empty);

		// Act
		var result = await handler.Handle(query, CancellationToken.None);

		// Assert
		result.Status.Should().Be(ResultStatus.NotFound);
	}

	[Fact]
	public async Task Handle_WhenRentalAudienceDoesNotMatch_ShouldReturnForbidden()
	{
		// Arrange
		var query = new GetRentalByIdQuery(Id: default, Audience: "DifferentAudience");
		var rental = ProviderEntitiesDummyFactory.CreateRentalDummy();

		rental.Offer.GeneratedBy = "TestAudience";

		rentalsRepositoryMock
			.Setup(r => r.FirstOrDefaultAsync(It.IsAny<RentalByIdWithOfferSpecification>(), It.IsAny<CancellationToken>()))
			.ReturnsAsync(rental);

		// Act
		var result = await handler.Handle(query, CancellationToken.None);

		// Assert
		result.Status.Should().Be(ResultStatus.Forbidden);
		result.Errors.Should().Contain("Offer associated with rental was generated by a different audience.");
	}

	[Fact]
	public async Task Handle_WhenRentalExistsAndAudienceMatches_ShouldReturnSuccess()
	{
		// Arrange
		var query = new GetRentalByIdQuery(Id: default, Audience: "TestAudience");
		var rental = ProviderEntitiesDummyFactory.CreateRentalDummy();

		rental.Offer.GeneratedBy = "TestAudience";

		var rentalDto = new RentalStatusDto(Id: default, Status: default);

		rentalsRepositoryMock
			.Setup(repo => repo.FirstOrDefaultAsync(It.IsAny<RentalByIdWithOfferSpecification>(), It.IsAny<CancellationToken>()))
			.ReturnsAsync(rental);

		mapperMock
			.Setup(mapper => mapper.Map<RentalStatusDto>(rental))
			.Returns(rentalDto);

		// Act
		var result = await handler.Handle(query, CancellationToken.None);

		// Assert
		result.Status.Should().Be(ResultStatus.Ok);
		result.Value.Should().BeEquivalentTo(rentalDto);
	}

	[Fact]
	public async Task Handle_ShouldCallRepositoryWithCorrectSpecification()
	{
		// Arrange
		var query = new GetRentalByIdQuery(Id: default, Audience: default);

		// Act
		await handler.Handle(query, CancellationToken.None);

		// Assert
		rentalsRepositoryMock.Verify(r => r.FirstOrDefaultAsync(
			It.IsAny<RentalByIdWithOfferSpecification>(),
			It.IsAny<CancellationToken>()),
			Times.Once
		);
	}
}